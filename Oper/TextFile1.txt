Практика
Общая задача - Комплексные числа и операции с ними
Доп. задача - Дроби и операции с ними (+ векторы, + матрицы)

Пространство имен - один из способов создавать огранизацию проекта.
Рекомендуется: 
 - Создавать отдельное пространство имен для папок (файловых); 
 - Называть ПИ также, как и папки;
В нашем случае логично выделить следующие ПИ:
 - для типов данных (Complex, Fraction, Matrix, ...)
 - для исключений с нашими типами данных
 - для утилит: операций смешанных типов или расширения стандартных операций

Классы: 
 - поля - переменная класса (данные)
 - методы - функции класса (код)
 - свойства - особенность .NET - "гибрид": поля с аксессорами
Рекомендация:
 при использовании членов объекта в методах этого же объекта использовать явные префиксы "base." или "this."

Перегрузка операций
 статические члены класса с приемом всех операндов


 -------------------------------
 Семантики: копирование и перенос
 С++: только одна семантика 
	- для указателей: перенос, 
	- для данных: копирование
С# - семантика определяется типом 
	- class - ссылочный тип (аналогичен указателю)
	  A = B - две ссылки на один объект
	- struct - значимый тип (аналогичен переменной)
	  A = B - копия B в A
Преобразование значимого типа в ссылочный называется упаковкой (boxing), обратное - распаковкой
Чаще всего, Это наблюдается для обобщенных элементов (Generics)
list.Add(obj) - в коллекцию добавляется ссылка на объект, а что если obj - значимый тип? Он должен копироваться?
в током случае он упаковывается: явно object(obj) / неявно (не пишем ничего)
list[0] - если ссылочный, то возвращается ссылка
		  если значимый, то распаковывается - копируется значение по упакованной ссылке
Упаковка / распаковка негативно влияет на быстродействие, поэтому ее следует избегать

Для задач копирования в ссылочных языках действует традиция клонирования
В C# для этого есть интерфейс ICloneable
	B = A.Clone()

-------------------------
Методы расширения (Extensions)
Расширения - доп возможности (к перегрузке операторо) реализовать поведение существующих классов (в т.ч. стандартных)

Расширение описываются как статические классы
public static CLassName {}
методы расширения - их статические методы
public static DataTypes.Complex Reflect (
типы, для который "включается" расширение, указываются с префиксом this.
	this DataTypes.Complex c) { .... }
После того как пространство имен с классом-расширением будет подключено в проекте (директивой using) все методы расширений будут доступны для объектов указанных типов